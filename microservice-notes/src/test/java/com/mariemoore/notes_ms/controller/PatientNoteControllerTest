import com.fasterxml.jackson.databind.ObjectMapper;
import com.mariemoore.notes_ms.model.Note;
import com.mariemoore.notes_ms.service.PatientNoteService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith(SpringExtension.class)
@WebMvcTest(PatientNoteController.class)
@AutoConfigureMockMvc
public class PatientNoteControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PatientNoteService noteService;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void testGetAllNotes() throws Exception {
        Note note1 = new Note("1", "patient1", "2024-03-18", "Note 1");
        Note note2 = new Note("2", "patient2", "2024-03-19", "Note 2");

        List<Note> notes = Arrays.asList(note1, note2);

        when(noteService.getAllNotes()).thenReturn(notes);

        mockMvc.perform(get("/api/notes"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].patientId").value("patient1"))
                .andExpect(jsonPath("$[0].date").value("2024-03-18"))
                .andExpect(jsonPath("$[0].note").value("Note 1"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].patientId").value("patient2"))
                .andExpect(jsonPath("$[1].date").value("2024-03-19"))
                .andExpect(jsonPath("$[1].note").value("Note 2"));
    }

    @Test
    public void testGetPatientNotesByPatientId() throws Exception {
        Note note1 = new Note("1", "patient1", "2024-03-18", "Note 1");
        Note note2 = new Note("2", "patient1", "2024-03-19", "Note 2");

        List<Note> notes = Arrays.asList(note1, note2);

        when(noteService.getNotesByPatientId("patient1")).thenReturn(notes);

        mockMvc.perform(get("/api/notes/patient1"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].patientId").value("patient1"))
                .andExpect(jsonPath("$[0].date").value("2024-03-18"))
                .andExpect(jsonPath("$[0].note").value("Note 1"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].patientId").value("patient1"))
                .andExpect(jsonPath("$[1].date").value("2024-03-19"))
                .andExpect(jsonPath("$[1].note").value("Note 2"));
    }

    @Test
    public void testCreatePatientNote() throws Exception {
        Note note = new Note("1", "patient1", "2024-03-18", "Note 1");

        when(noteService.createNote(any(Note.class))).thenReturn(note);

        mockMvc.perform(post("/api/notes")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(note)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value("1"))
                .andExpect(jsonPath("$.patientId").value("patient1"))
                .andExpect(jsonPath("$.date").value("2024-03-18"))
                .andExpect(jsonPath("$.note").value("Note 1"));
    }

    @Test
    public void testUpdatePatientNote() throws Exception {
        Note updatedNote = new Note("1", "patient1", "2024-03-18", "Updated Note");

        when(noteService.updateNote(any(Note.class))).thenReturn(updatedNote);

        mockMvc.perform(put("/api/notes")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updatedNote)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value("1"))
                .andExpect(jsonPath("$.patientId").value("patient1"))
                .andExpect(jsonPath("$.date").value("2024-03-18"))
                .andExpect(jsonPath("$.note").value("Updated Note"));
    }

    @Test
    public void testDeletePatientNote() throws Exception {
        Note note = new Note("1", "patient1", "2024-03-18", "Note 1");
        Optional<Note> noteOptional = Optional.of(note);

        when(noteService.getNoteById("1")).thenReturn(noteOptional);

        mockMvc.perform(delete("/api/notes/1"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value("1"))
                .andExpect(jsonPath("$.patientId").value("patient1"))
                .andExpect(jsonPath("$.date").value("2024-03-18"))
                .andExpect(jsonPath("$.note").value("Note 1"));
    }
}
