{
	"info": {
		"_postman_id": "687a26f3-196c-41bc-bb51-4555ce1b4a21",
		"name": "MediLabo Solutions",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14658535"
	},
	"item": [
		{
			"name": "Notes",
			"item": [
				{
					"name": "Get Note",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9000/api/notes/{{note_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete note",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9000/api/notes/65d77eb05470e21e6a5f3914",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"notes",
								"65d77eb05470e21e6a5f3914"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"patientId\": \"65d77eb05470e21e6a5f3914\",\n  \"date\": \"1990-01-15\",\n  \"note\": \"Some great note\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9000/api/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"notes"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"65d874762af0c84c3d97a8ff\",\n  \"patientId\": \"65d77eb05470e21e6a5f3914\",\n  \"date\": \"1990-01-15\",\n  \"note\": \"Some great note Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9000/api/notes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"api",
								"notes"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Patients",
			"item": [
				{
					"name": "Post Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"John\",\n  \"lastname\": \"Doe\",\n  \"birthdate\": \"1990-01-15\",\n  \"gender\": \"M\",\n  \"address\": [\"123 Main St\"],\n  \"phone_number\": \"555-1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{patient_url}}/patients",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "     {\n          \"id\": \"1\",\n          \"firstname\": \"UPDATED\",\n          \"lastname\": \"None\",\n          \"birthdate\": \"1945-06-23T22:00:00.000+00:00\",\n          \"gender\": \"F\",\n          \"address\": [\n               \"1 Brookside St\"\n          ],\n          \"phone_number\": \"100-222-3333\"\n     }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{patient_url}}/patients",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{patient_url}}/patients/1",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Actuator refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstname\": \"John\",\n  \"lastname\": \"Doe\",\n  \"birthdate\": \"1990-01-15\",\n  \"gender\": \"M\",\n  \"address\": [\"123 Main St\"],\n  \"phone_number\": \"555-1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{patient_url}}/patients",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get all Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{patient_url}}/patients",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "Get all Patients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{patient_url}}/patients",
									"host": [
										"{{patient_url}}"
									],
									"path": [
										"patients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 09 Jan 2024 14:20:54 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"1\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"None\",\n        \"birthdate\": \"1945-06-23T22:00:00.000+00:00\",\n        \"gender\": \"F\",\n        \"address\": [\n            \"1 Brookside St\"\n        ],\n        \"phone_number\": \"100-222-3333\"\n    },\n    {\n        \"id\": \"2\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"Borderline\",\n        \"birthdate\": \"1945-06-23T22:00:00.000+00:00\",\n        \"gender\": \"M\",\n        \"address\": [\n            \"2 High St\"\n        ],\n        \"phone_number\": \"200-333-4444\"\n    },\n    {\n        \"id\": \"3\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"InDanger\",\n        \"birthdate\": \"2004-06-17T22:00:00.000+00:00\",\n        \"gender\": \"M\",\n        \"address\": [\n            \"3 Club Road\"\n        ],\n        \"phone_number\": \"300-444-5555\"\n    },\n    {\n        \"id\": \"4\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"EarlyOnset\",\n        \"birthdate\": \"2002-06-27T22:00:00.000+00:00\",\n        \"gender\": \"F\",\n        \"address\": [\n            \"4 Valley Dr\"\n        ],\n        \"phone_number\": \"400-555-6666\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{patient_url}}/patients/1",
							"host": [
								"{{patient_url}}"
							],
							"path": [
								"patients",
								"1"
							],
							"query": [
								{
									"key": "id",
									"value": "\"1\"",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "gateway",
			"item": [
				{
					"name": "request gateway",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyQGdtYWlsLmNvbSIsImlhdCI6MTcxNzYwOTMwNSwiZXhwIjoxNzE3Njk1NzA1fQ.WDDbfD5hSiy0ze8H6Jj-iVi2sfJe6ZRy-0kESBGLPeBags5bJQXl8hCGcKR8pOtVIKvYrDJcXBjVU13SrY_C-g",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/patients",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Get health risk",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9004/api/healthrisks/65d86f453cc672574340bbd2/32/34",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9004",
					"path": [
						"api",
						"healthrisks",
						"65d86f453cc672574340bbd2",
						"32",
						"34"
					]
				}
			},
			"response": []
		},
		{
			"name": "test Gateway Restcontroller",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9002/test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9002",
							"path": [
								"test"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Referrer-Policy",
							"value": "no-referrer"
						},
						{
							"key": "content-length",
							"value": "0"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "\"1\""
		},
		{
			"key": "patient_url",
			"value": "http://localhost:9001/api"
		},
		{
			"key": "note_url",
			"value": "http://localhost:9000/api",
			"type": "string"
		},
		{
			"key": "note_id",
			"value": "65d77eb05470e21e6a5f3914",
			"type": "string"
		}
	]
}